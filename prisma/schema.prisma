generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   
  expiresAt   DateTime
}

model User {
  id Int @id @default(autoincrement())
  username String
  password String
  email String?
  fullName String? @map("full_name")
  createdAt DateTime @map("created_at")
  avatarUrl String? // Cloudinary URL
  posts Post[] @relation("PostsPublished")
  likedPosts Post[] @relation("LikedBy")
  dislikedPosts Post[] @relation("DislikedBy")
  comments Comment[]
  likedComments Comment[] @relation("CommentLikedBy")
  dislikedComments Comment[] @relation("CommentDislikedBy")

  @@map("users")

}

model Post {
  id Int @id @default(autoincrement())
  title String
  createdAt DateTime @map("created_at")
  publishedAt DateTime @map("published_at")
  updatedAt DateTime @map("updated_at")
  authorId Int @map("author_id")
  author User @relation("PostsPublished", fields: [authorId], references: [id]) //or authors?
  content String// ?? string + images 
  image String? //or images thumbnail? : Kept it just one for thumbnail. think later
  comments Comment[]
  status PostStatus @default(UNPUBLISHED)
  numberOfLikes Int @default(0) @map("number_of_likes")
  numberOfDislikes Int @default(0) @map("number_of_dislikes")
  likedBy User[] @relation("LikedBy")
  dislikedBy User[] @relation("DislikedBy")

  @@map("posts")
}

model Comment {
  id Int @id @default(autoincrement())
  author User[]// whatever details we need, can be extracted from User model
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")// decide if i want to allow editing a comment
  numberOfLikes Int @default(0) @map("number_of_likes")// really? should i put these too?
  likedBy User[] @relation("CommentLikedBy")
  numberOfDislikes Int @default(0) @map("number_of_dislikes")
  dislikedBy User[] @relation("CommentDislikedBy")
  //replies // oh gosh no!!
  content  String // the main content of the comment
  postId Int @map("post_id")
  post Post @relation(fields: [postId], references: [id])

  @@map("comments")

}

enum PostStatus {
  PUBISHED 
  UNPUBLISHED
}



